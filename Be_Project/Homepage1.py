# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Homepage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from RealDataset1 import Ui_RealDatasetWindow
from zipfile import ZipFile
import os
import pandas as pd
import pymongo
from pymongo import MongoClient
from nltk.corpus import stopwords
import nltk
import string
from nltk.stem.porter import PorterStemmer

nltk.download('punkt')
nltk.download('stopwords')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(472, 538)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.homepage_label = QtWidgets.QLabel(self.centralwidget)
        self.homepage_label.setGeometry(QtCore.QRect(160, 30, 181, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.homepage_label.setFont(font)
        self.homepage_label.setAlignment(QtCore.Qt.AlignJustify | QtCore.Qt.AlignVCenter)
        self.homepage_label.setObjectName("homepage_label")
        self.uploadDataset_btn = QtWidgets.QPushButton(self.centralwidget)
        self.uploadDataset_btn.setGeometry(QtCore.QRect(30, 380, 131, 31))
        self.uploadDataset_btn.setObjectName("uploadDataset_btn")
        self.model_btn = QtWidgets.QPushButton(self.centralwidget)
        self.model_btn.setGeometry(QtCore.QRect(200, 410, 81, 31))
        self.model_btn.setStyleSheet("background-color: rgb(110, 255, 127);")
        self.model_btn.setObjectName("model_btn")
        self.groups_6 = QtWidgets.QPushButton(self.centralwidget)
        self.groups_6.setGeometry(QtCore.QRect(170, 460, 141, 31))
        self.groups_6.setStyleSheet("background-color: rgb(12, 255, 32);")
        self.groups_6.setObjectName("groups_6")
        self.viewDataset_btn = QtWidgets.QPushButton(self.centralwidget)
        self.viewDataset_btn.setGeometry(QtCore.QRect(310, 380, 131, 31))
        self.viewDataset_btn.setObjectName("viewDataset_btn")
        self.client_label = QtWidgets.QLabel(self.centralwidget)
        self.client_label.setGeometry(QtCore.QRect(80, 140, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.client_label.setFont(font)
        self.client_label.setObjectName("client_label")
        self.org_label = QtWidgets.QLabel(self.centralwidget)
        self.org_label.setGeometry(QtCore.QRect(80, 90, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.org_label.setFont(font)
        self.org_label.setObjectName("org_label")
        self.domain_label = QtWidgets.QLabel(self.centralwidget)
        self.domain_label.setGeometry(QtCore.QRect(80, 190, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.domain_label.setFont(font)
        self.domain_label.setObjectName("domain_label")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(80, 250, 47, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.org_txt = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.org_txt.setGeometry(QtCore.QRect(200, 90, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.org_txt.setFont(font)
        self.org_txt.setObjectName("org_txt")
        self.client_txt = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.client_txt.setGeometry(QtCore.QRect(200, 140, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.client_txt.setFont(font)
        self.client_txt.setObjectName("client_txt")
        self.domain_txt = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.domain_txt.setGeometry(QtCore.QRect(200, 190, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.domain_txt.setFont(font)
        self.domain_txt.setPlainText("")
        self.domain_txt.setObjectName("domain_txt")
        self.title_txt = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.title_txt.setGeometry(QtCore.QRect(200, 240, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.title_txt.setFont(font)
        self.title_txt.setPlainText("")
        self.title_txt.setObjectName("title_txt")
        self.submit_btn = QtWidgets.QPushButton(self.centralwidget)
        self.submit_btn.setGeometry(QtCore.QRect(370, 290, 71, 31))
        self.submit_btn.setStyleSheet("background-color: rgb(88, 138, 255);")
        self.submit_btn.setObjectName("submit_btn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 472, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # button click events
        self.uploadDataset_btn.clicked.connect(self.openUploadDataset)
        self.viewDataset_btn.clicked.connect(self.openRealDataset)
        self.submit_btn.clicked.connect(self.getInput)
        # button click events over

    def get_database(self):
        # Provide the mongodb atlas url to connect python to mongodb using pymongo
        connect_string = "mongodb+srv://root:root123@cluster0.gpfxe.mongodb.net/AutoReview?retryWrites=true&w=majority"

        # Create a connection using MongoClient. You can import MongoClient or use pymongo.MongoClient
        client = pymongo.MongoClient(connect_string, connect=False)
        print("connection established")
        return client

    
    def PreProcessingSteps(self, text):
         ps=PorterStemmer()
         text = text.lower()
         text = nltk.word_tokenize(text)
         y = []
         for i in text:
             if i.isalnum():
                y.append(i)
         text = y[:]
         y.clear()
         for i in text:
             if i not in stopwords.words('english') and i not in string.punctuation:
                y.append(i)   
         text = y[:]
         y.clear()
         for i in text:
            y.append(ps.stem(i))   
         return " ".join(y)

    
    def ProcessLabeled(self, file_name_process):
        with ZipFile(file_name_process, 'r') as zip:
           print('Extracting all the files now...')
           zip.extractall()
           print('Done!')
           file_name_categories=file_name_process.removesuffix(".zip")
           print(file_name_categories)
           categories = list(os.listdir(file_name_categories)) 
           print(categories)  
           file_contents = []
           category_col = []
           fileName = []
           file_path = []
           classification_mode = []
           classification_status = []
           ids = []
           i=1
           for category in categories:
              file_names = list(os.listdir(f'{file_name_categories}/{category}'))
              for file_name in file_names: 
                 #try: 
                   with open(f'{file_name_categories}/{category}/{file_name}', 'r') as file:
                     f = file.read().replace('\n', '')
                   ids.append(i)
                   fileName.append(category+"_"+str(i))
                   file_path.append(file_name_categories+"/"+category+"/"+file_name)
                   file_contents.append(f)
                   category_col.append(category)
                   classification_mode.append("Manual")
                   classification_status.append("Labeled")
                   i+=1
                 #except: print(file_name)
        df = pd.DataFrame(ids)
        df["Name"] = fileName
        df["Path"] = file_path
        df["Category"] = category_col
        df["Classification_Mode"] = classification_mode
        df["Status"] = classification_status
        df.rename(columns = {0: '_id'}, inplace = True)
        df["Content"]=file_contents
        df = df.drop_duplicates(keep='first')
        df.duplicated().sum()
        print("Before preprocessing of text begins")
        transform_text_array=[]
        for contents in df["Content"]:
            text=self.PreProcessingSteps(contents)
            transform_text_array.append(text)
        print("Preprocessing Done")
        df["Transformed_text"]=transform_text_array
        df.drop(["Content"], axis = 1)
        print(df)
        self.insertData(df)

        

     # insert data into database
    def insertData(self, df):
        client=self.get_database()  # connection object
        db=client['AutoReview']     # database object
        collection_name = db['AllDocuments']    # collection object

        # convert dataframe to list of dictioories
        data=df.to_dict('records')
        print(data)

        # delete all records
        collection_name.delete_many({})
        print("Deleted previous records")
        # insert data
        x=collection_name.insert_many(data)
        print(x)
   


    # open browse file dialog box
    def openUploadDataset(self):
       # self.get_database()
        file_name1 = QFileDialog.getOpenFileNames()
        print(file_name1[0][0])
        self.ProcessLabeled(file_name1[0][0])
        



                
    # open RealDataset.ui
    def openRealDataset(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_RealDatasetWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    # get input text
    def getInput(self):
        organization = self.org_txt.toPlainText()
        client = self.client_txt.toPlainText()
        domain = self.domain_txt.toPlainText()
        proj_title = self.title_txt.toPlainText()
        # print("Org= " + organization + "\n" + "client= " + client + "\n" + "domain= " + domain + "\n" + "title= " + proj_title)

        # reset the textbox to null string
        self.org_txt.setPlainText("")
        self.client_txt.setPlainText("")
        self.domain_txt.setPlainText("")
        self.title_txt.setPlainText("")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.homepage_label.setText(_translate("MainWindow", " Home Page"))
        self.uploadDataset_btn.setText(_translate("MainWindow", "Upload Dataset"))
        self.model_btn.setText(_translate("MainWindow", "Run model"))
        self.groups_6.setText(_translate("MainWindow", "Result"))
        self.viewDataset_btn.setText(_translate("MainWindow", "View Dataset"))
        self.client_label.setText(_translate("MainWindow", "Client Name"))
        self.org_label.setText(_translate("MainWindow", "Organization"))
        self.domain_label.setText(_translate("MainWindow", "Domain"))
        self.title_label.setText(_translate("MainWindow", "Title"))
        self.submit_btn.setText(_translate("MainWindow", "Submit"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
